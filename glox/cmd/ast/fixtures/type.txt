
type ExprVisitor interface {
	VisitBinary(e *BinaryExpr) (result interface{}, err error)
	VisitGrouping(e *GroupingExpr) (result interface{}, err error)
}

type BinaryExpr struct {
	left     Expr
	operator *token.Token
	right    Expr
}

func (e *BinaryExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitBinary(e)
}

type GroupingExpr struct {
	expression Expr
}

func (e *GroupingExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitGrouping(e)
}
