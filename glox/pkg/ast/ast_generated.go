// Code generated by generate_ast. DO NOT EDIT.
// Eg of Go's AST: https://go.googlesource.com/go/+/38cfb3be9d486833456276777155980d1ec0823e/src/go/ast/ast.go#1

package ast

import (
	"github.com/modulitos/glox/pkg/token"
)

type Expr interface {
	Accept(visitor ExprVisitor) (result interface{}, err error)
}

type Stmt interface {
	Accept(visitor StmtVisitor) error
}

type ExprVisitor interface {
	VisitBinary(e *BinaryExpr) (result interface{}, err error)
	VisitGrouping(e *GroupingExpr) (result interface{}, err error)
	VisitLiteral(e *LiteralExpr) (result interface{}, err error)
	VisitUnary(e *UnaryExpr) (result interface{}, err error)
}

type BinaryExpr struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

func (e *BinaryExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitBinary(e)
}

type GroupingExpr struct {
	Expression Expr
}

func (e *GroupingExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitGrouping(e)
}

type LiteralExpr struct {
	Value interface{}
}

func (e *LiteralExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitLiteral(e)
}

type UnaryExpr struct {
	Operator *token.Token
	Right    Expr
}

func (e *UnaryExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitUnary(e)
}

type StmtVisitor interface {
	VisitExpression(e *ExpressionStmt) error
	VisitPrint(e *PrintStmt) error
}

type ExpressionStmt struct {
	Expression Expr
}

func (e *ExpressionStmt) Accept(visitor StmtVisitor) error {
	return visitor.VisitExpression(e)
}

type PrintStmt struct {
	Expression Expr
}

func (e *PrintStmt) Accept(visitor StmtVisitor) error {
	return visitor.VisitPrint(e)
}
